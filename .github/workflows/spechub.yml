name: Build and Deploy SpecHub

on:
  push:
    branches: [ main ]
  pull_request:
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pages: write
      id-token: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y graphviz

      - name: Build specs artifacts
        run: |
          python3 specs/_build/build.py

      - name: Validate traces and set schema badge
        run: |
          python3 trace_validator.py
          if [ $? -eq 0 ]; then echo "SPECHUB_SCHEMA_STATUS=ok" >> $GITHUB_ENV; else echo "SPECHUB_SCHEMA_STATUS=failed" >> $GITHUB_ENV; fi

      - name: Install Python deps (generator)
        run: |
          python3 -m pip install --upgrade pip
          pip install mkdocs mkdocs-material jinja2 pydot graphviz markdownify

      - name: Generate SpecHub docs
        run: |
          python3 docs/generate_docs.py

      - name: Optimize SVGs (svgo)
        run: |
          npx -y svgo docs/_media/*.svg || true

      - name: Build MkDocs site
        run: |
          mkdocs build --strict

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./site

      - name: Link check (internal only)
        uses: lycheeverse/lychee-action@v1
        with:
          args: --offline --no-progress --timeout 10 --verbose ./site/**/*.html
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Link check (external; warnings only)
        uses: lycheeverse/lychee-action@v1
        continue-on-error: true
        with:
          args: --no-progress --timeout 10 --verbose --exclude "https://json-schema.org,https://github.com" ./site/**/*.html
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Link check (fragments on index pages; warnings only)
        uses: lycheeverse/lychee-action@v1
        continue-on-error: true
        with:
          args: --offline --include-fragments --no-progress --timeout 10 --verbose ./site/stories/index.html ./site/prd/index.html ./site/flow/index.html ./site/ctxux/index.html ./site/hig/index.html ./site/ux/index.html
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Lighthouse (warn-only)
        continue-on-error: true
        run: |
          npm -g i http-server
          npx -y http-server site -p 8080 -s &
          sleep 2
          npm -g i lighthouse
          lighthouse http://127.0.0.1:8080/ --output=json --output-path=./lh-home.json --only-categories=performance,accessibility --chrome-flags="--headless"
          lighthouse http://127.0.0.1:8080/stories/index/ --output=json --output-path=./lh-stories.json --only-categories=performance,accessibility --chrome-flags="--headless"
          sudo apt-get update && sudo apt-get install -y jq || true
          for f in lh-home.json lh-stories.json; do \
            P=$(jq '.categories.performance.score*100|floor' "$f"); \
            A=$(jq '.categories.accessibility.score*100|floor' "$f"); \
            echo "Lighthouse $f: performance=$P accessibility=$A"; \
            if [ "$P" -lt 90 ]; then echo "::warning ::Performance below 90 in $f ($P)"; fi; \
            if [ "$A" -lt 90 ]; then echo "::warning ::Accessibility below 90 in $f ($A)"; fi; \
          done

      - name: Markdown lint (warnings only)
        continue-on-error: true
        run: |
          npm -g i markdownlint-cli2
          markdownlint-cli2 "docs/**/*.md"

      - name: Upload site artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: site
          path: site

      - name: Upload diagrams
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: diagrams
          path: docs/_media/*.svg

  deploy:
    if: github.ref == 'refs/heads/main'
    needs: build
    runs-on: ubuntu-latest
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
